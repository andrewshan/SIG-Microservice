syntax = "proto3";

package trafficcontrol;

option go_package = "api/v1/trafficcontrol";
option java_package = "cn.polarismesh.polaris.trafficcontrol";

import "google/protobuf/wrappers.proto";

// configuration root for route
message Routing {
  // Rule belongs and namespace
  string namespace = 1;
  string service = 2;

  // Each service can configure multiple inbound or outbound rules
  // For each request, you can match from top to bottom, if you are in the
  // middle, terminate
  // For compatible only
  repeated Route inbounds = 3;
  // For compatible only
  repeated Route outbounds = 4;

  string revision = 7;

  string id = 10;

  // route rule name
  string name = 11;
}

message Route {
  // If you match the Source rule, follow the Destination route
  // The relationship between multiple SOURCE is or
  repeated Source sources = 1;
  // 
  repeated Destination destinations = 2;
}

message Source {
  // Main tuning service and namespace
  string service = 1;
  string namespace = 2;

  // Master Control Service Example Tag or Request Label
  // Value supports regular matching
  repeated MatchArgument arguments = 3;
}

message Destination {
  // Templated service and namespace
  string service = 1;
  string namespace = 2;

  // Templated service example label
  // Value supports regular matching
  map<string, string> labels = 3;

  // According to the service name and service instance Metadata Filter the
  // qualified service instance subset Service instance subset can set priority
  // and weight Priority: integer, range [0, 9], the highest priority is 0
  // Weight: Integer
  // Press priority routing, if there is high priority, low priority will not
  // use If there is a subset of the same priority, then assign by weight
  // Priority and weight can be not set / set up one / set two
  // If the section is set priority, some are not set, it is considered that the
  // priority is not set. If the part is set, some is not set, it is considered
  // that the weight is not set to 0 If you have no weight, you think the weight
  // is the same
  google.protobuf.UInt32Value priority = 4;
  google.protobuf.UInt32Value weight = 5;

  // Forward requests to proxy service
  string transfer = 6;

  // Whether to isolate the SET, after isolation, no traffic will be allocated
  bool isolate = 7;

  // Locality info for destination
  LocalityRoutingConfig locality = 8;
}

// MatchString
message MatchString {
  enum MatchStringType {
    // Equivalent match
    EQUALS = 0;
    // Not equals match
    NOT_EQUALS = 1;
    // Include match
    INCLUDE = 2;
    // Not include match
    NOT_INCLUDE = 3;
    // Less than match
    LESS_THAN = 4;
    // Greater than match
    GREATER_THAN = 5;
    // Regular match
    REGEX = 6;
  }

  enum ValueType {
    // Routing rules write dead data
    TEXT = 0;
  }

  // Matching rule
  MatchStringType type = 1;

  // Routing rules
  string value = 2;

  // Value type, specific acquisition path for routing rule values
  ValueType value_type = 3;
}

message MatchArgument {
  // label type for gateway request
  enum Type {
    // custom arguments
    CUSTOM = 0;
    // method, match the http post/get/put/delete or grpc method
    METHOD = 1;
    // header, match the http header, dubbo attachment, grpc header
    HEADER = 2;
    // query, match the http query, dubbo argument
    QUERY = 3;
    // caller service
    CALLER_SERVICE = 4;
    // caller host ip
    CALLER_IP = 5;
  }
  Type type = 1;
  // header key or query key
  string key = 2;
  // header value or query value
  MatchString value = 3;
}

message FailoverConfig {
  // Enable degrade
  bool enable = 1;

  // Degrade by left instance total
  uint32 total_count = 2;

  // Degrade by healthy instance total
  uint32 healthy_count = 3;

  // Degrade by healthy instance precent
  uint32 healthy_percent = 4;
}

message LocalityRoutingConfig {

  enum LocalityLevel {
    CAMPUS = 0;
    ZONE = 1;
    REGION = 2;
    ALL = 3;
  }

  // Starting locality level
  LocalityLevel locality_level = 1;
  // When failover, the router will down to match higher level, here define the
  // max failover level
  LocalityLevel max_locality_level = 2;
  // Whether to allow the nearest route downgrade according to different health levels
  bool enableDegradeByUnhealthyPercent = 3;
  // Sets the percentage of unhealthy instances that trigger the nearest route matching downgrade
  bool unhealthyPercentToDegrade = 4;
  // Enable degrade
  bool enable = 5;
}
