syntax = "proto3";

package accesscontrol;

option go_package = "api/v1/accesscontrol";
option java_package = "cn.polarismesh.polaris.accesscontrol";

import "google/protobuf/wrappers.proto";
import "google/protobuf/duration.proto";

// Set of all rate limiting rules for the service
message RateLimit {
  // Set of limiting rules
  repeated Rule rules = 1;
  // The revision information summarized by the rate limiting rules
  string revision = 2;
}

//Rate limiting rule specification
message Rule {
  // The name of the service to which the rate limiting rule belongs
  string service = 1;
  // The namespace to which the rate limiting rule belongs
  string namespace = 2;

  // Whether to enable the rate limiting rule, enabled by default
  bool disabled = 3;

  // Rate limit type
  LimitType limit_type = 4;
  // Rate limiting resource type
  ResourceType resource_type = 5;

  // Called method name
  MatchString method = 6;
  // The set of request labels, which are matched by key/value, and this rule is used only when all labels are matched.
  repeated MatchArgument arguments = 7;
  // Whether wildcards are combined and counted, the default counts separately
  bool regex_combine = 8;

  // Rate limiting threshold
  // There can be multiple granularity configurations (for example, for seconds, minutes, and days at the same time)
  // In the global rate limiting mode, the value is the total amount of service quota;
  // in the stand-alone rate limiting mode, the value is the quota amount that a single node can handle
  repeated Amount amounts = 9;

  // Action after request is throttled
  // For example, reject the request
  Action action = 10;

  // Degradation policy when failed to obtain rate limiting rules from the control plane
  GlobalFailoverType global_failover_type = 11;

  // The params for adaptive params
  AdaptiveParams adaptive_params = 12;
}

// Rate limiting type
enum LimitType {
  //Global rate limiting, cluster rate limiting, distributed rate limiting
  GLOBAL = 0;
  //Stand-alone rate limiting
  LOCAL = 1;
  //Self adaption rate limiting
  ADAPTIVE = 2;
}

// Rate limiting resources
enum ResourceType {
  // Access request
  QPS = 0;
  // Concurrent threads handling requests
  CONCURRENCY = 1;
}

// Match regular expression
message MatchString {
  // Match type
  enum MatchStringType {
    EQUALS = 0;
    NOT_EQUALS = 1;
    IN = 2;
    NOT_IN = 3;
    REGEX = 4;
  }

  enum ValueType {
    TEXT = 0;
  }

  MatchStringType type = 1;
  repeated string value = 2;
}

message MatchArgument {
  // label type for gateway request
  enum Type {
    // custom arguments
    CUSTOM = 0;
    // method, match the http post/get/put/delete or grpc method
    METHOD = 1;
    // header, match the http header, dubbo attachment, grpc header
    HEADER = 2;
    // query, match the http query, dubbo argument
    QUERY = 3;
    // caller service
    CALLER_SERVICE = 4;
    // caller host ip
    CALLER_IP = 5;
  }
  Type type = 1;
  // header key or query key
  string key = 2;
  // header value or query value
  MatchString value = 3;
}

// Rate limiting quota
message Amount {
  // Maximum number of quotas in a time period
  uint32 max_amount = 1;
  // The time period during which the quota takes effect, which must be greater than or equal to 1 s
  google.protobuf.Duration valid_duration = 2;
}

// The action after limited
enum Action {
  // Reject request
  REJECT = 0;
  // Put request in the queue
  QUEUE = 1;
}

// The failover type
enum GlobalFailoverType {
  // Downgrade using local rate limiting rules
  FAILOVER_LOCAL = 0;
  // downgrade to direct pass
  FAILOVER_PASS = 1;
}

// Self adaption limit params
message AdaptiveParams {
  uint32 load1 = 1;
  uint32 load5 = 2;
  double cpu = 3;
  uint32 avg_rt = 4;
  uint32 active_thread_cnt = 5;
  uint32 qps = 6;
}
